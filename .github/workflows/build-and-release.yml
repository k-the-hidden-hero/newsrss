name: Build and Release

on:
  push:
    tags:
    - 'v*.*.*'
    branches:
    - development

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Controlli di qualità prima della build
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        cache: "pip"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry config virtualenvs.create false
        poetry install --with dev

    - name: Code quality checks
      run: |
        black --check .
        isort --check .
        ruff check .
        mypy newsrss

    - name: Security scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_CONFIG: .gitleaks.toml

  # Estrae informazioni sulla versione e determina i tag
  version:
    name: Extract Version Info
    runs-on: ubuntu-latest
    needs: quality-checks
    outputs:
      is_tag: ${{ steps.check_tag.outputs.is_tag }}
      version: ${{ steps.get_version.outputs.version }}
      prerelease: ${{ steps.get_version.outputs.prerelease }}
      container_tags: ${{ steps.get_version.outputs.container_tags }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Check if triggered by tag
      id: check_tag
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "is_tag=true" >> $GITHUB_OUTPUT
        else
          echo "is_tag=false" >> $GITHUB_OUTPUT
        fi

    - name: Get version info
      id: get_version
      run: |
        if [[ "${{ steps.check_tag.outputs.is_tag }}" == "true" ]]; then
          # Si tratta di un tag - utilizziamo la versione dal tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "prerelease=false" >> $GITHUB_OUTPUT
          echo "container_tags=latest,${VERSION}" >> $GITHUB_OUTPUT
        else
          # Si tratta di un commit sul branch development
          # Troviamo l'ultimo tag
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}

          # Incrementiamo la versione
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-pre"

          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "container_tags=devel,prerelease,${NEW_VERSION}" >> $GITHUB_OUTPUT
        fi

  # Build e push del container
  build-and-push:
    name: Build and push Docker image
    needs: [version, quality-checks]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Prepare container tags
      id: prepare_tags
      run: |
        TAGS=""
        IFS=',' read -ra TAG_ARRAY <<< "${{ needs.version.outputs.container_tags }}"
        for tag in "${TAG_ARRAY[@]}"; do
          TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${tag}"
        done
        TAGS=${TAGS:1}  # Remove the leading comma
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.prepare_tags.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Crea release o pre-release
  create-release:
    name: Create GitHub Release
    needs: [ version, build-and-push ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: success()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.version.outputs.is_tag == 'true' && github.ref || format('v{0}', needs.version.outputs.version) }}
        release_name: Release ${{ needs.version.outputs.version }}
        draft: false
        prerelease: ${{ needs.version.outputs.prerelease }}
        body: |
          ## Release ${{ needs.version.outputs.version }}

          Container image: `ghcr.io/${{ github.repository }}:${{ needs.version.outputs.version }}`

          ### Docker Pull Command
          ```
          docker pull ghcr.io/${{ github.repository }}:${{ needs.version.outputs.version }}
          ```

          ${{ needs.version.outputs.prerelease == 'true' && '⚠️ This is a pre-release build from the development branch. Not recommended for production use.' || 'Stable release from tag.' }}
