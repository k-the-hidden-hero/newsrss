alias: Riproduci Ultime Notizie
description: Riproduce sequenzialmente gli ultimi episodi delle notizie con annunci TTS
variables:
  target_player: media_player.soggiorno
  tts_service: tts.home_assistant_cloud
  news_entity: sensor.news
  snapshot_name: news
  episodes_list: "{{ state_attr(news_entity, 'episodes') | default([]) }}"
  unknown_feed: Feed sconosciuto
  end_news: Fine delle notizie.
sequence:
- alias: Play news or advise no news found
  if:
  - condition: template
    value_template: "{{ state_attr(news_entity, 'episodes') | count > 0 }}"
    alias: Check if there are news
  then:
  - data:
      scene_id: "{{ snapshot_name }}"
      snapshot_entities:
      - "{{ target_player }}"
    action: scene.create
    alias: Save the player state
  - target:
      entity_id: "{{ target_player }}"
    action: media_player.media_stop
    alias: Stop the player.
  - alias: Cycle on news episodes
    repeat:
      sequence:
      - variables:
          current_episode: "{{ episodes_list[repeat.index - 1] }}"
          feed_name: "{{ current_episode.feed_name | default(unknown_feed) }}"
          episode_title: >-
            {{ current_episode.episode_title | default('Titolo sconosciuto') }}
          url_episode: "{{ current_episode.episode_url }}"
          duration: "{{ current_episode.duration }}"
        alias: Set Variables
      - action: tts.speak
        target:
          entity_id: "{{ tts_service }}"
        data:
          media_player_entity_id: "{{ target_player }}"
          message: "{{feed_name}} {{ episode_title }}"
        alias: Announce episode title
      - action: media_player.play_media
        target:
          entity_id: "{{ target_player }}"
        data:
          media_content_id: "{{ url_episode }}"
          media_content_type: audio/mpeg
          enqueue: replace
        alias: Play the news
      - wait_for_trigger:
        - trigger: state
          entity_id:
          - media_player.soggiorno
          from: null
          to:
          - paused
          - stopped
          - idle
          for:
            seconds: 1
        timeout: "{{ duration }}"
        alias: Wait for the player to finish
      count: "{{ episodes_list | count }}"
  - action: tts.speak
    target:
      entity_id: "{{ tts_service }}"
    data:
      media_player_entity_id: "{{ target_player }}"
      message: "{{ end_news }}"
    alias: Announce end of news.
  - target:
      entity_id: scene.{{ snapshot_name }}
    action: scene.turn_on
    alias: Restore Player state
  else:
  - data:
      entity_id: "{{ target_player }}"
      message: Nessuna news
    action: "{{ tts_service }}"
    enabled: true
    alias: No news to play
