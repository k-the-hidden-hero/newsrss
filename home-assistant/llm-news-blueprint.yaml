blueprint:
  name: News RSS Player Tool for Voice Assistants
  description: >
    Creates a script to play the latest news episodes via voice commands. This tool can be used by LLM assistants to handle natural language requests like "play the latest news" or "tell me the news" in a specific area or media player.
  domain: script
  source_url: https://github.com/k-the-hidden-hero/newsrss/blob/main/home-assistant/llm-news-blueprint.yaml
  input:
    news_sensor:
      name: News Sensor
      description: The sensor entity containing news episodes (should have episodes attribute with feed_name, episode_title, episode_url, duration)
      selector:
        entity:
          domain: sensor
      default: sensor.news
    default_player:
      name: Default Media Player
      description: Default media player to use when no area is specified and area detection fails
      selector:
        entity:
          domain: media_player
      default: media_player.living_room
    tts_service:
      name: TTS Service
      description: Text-to-speech service to use for announcements
      selector:
        text:
      default: tts.home_assistant_cloud
    snapshot_name:
      name: Snapshot Name
      description: Name to use for media player state snapshot
      default: news_snapshot
    prompt_description:
      name: Tool Description for LLM
      description: Description that will be shown to the LLM to understand when to use this tool
      selector:
        text:
      default: >
        Use this tool to play the latest news episodes when the user asks to hear news. The tool can play news on a specific media player or in a specific area. This tool doesn't require any parameters, but can optionally accept an area name.
    area_description:
      name: Area Parameter Description
      description: Description for the area parameter shown to the LLM
      selector:
        text:
      default: >
        The area where the news should be played. If not provided, will use the area where the request originated from, or the default player if area detection fails.
    unknown_feed_text:
      name: Unknown Feed Text
      description: Text to use when a feed has no name
      default: Unknown Feed
    end_news_text:
      name: End News Text
      description: Text to announce when all news episodes have finished playing
      default: End of news.
    no_news_text:
      name: No News Text
      description: Text to announce when no news episodes are available
      default: No news available.

mode: restart
max_exceeded: silent

fields:
  area:
    description: "{{ area_description }}"
    example: Living Room
    required: false

variables:
  # Blueprint inputs
  news_sensor: !input news_sensor
  default_player: !input default_player
  tts_service: !input tts_service
  snapshot_name: !input snapshot_name
  unknown_feed_text: !input unknown_feed_text
  end_news_text: !input end_news_text
  no_news_text: !input no_news_text

  # Runtime variables
  target_area: "{{ area }}"
  # Get all players in Home Assistant
  all_players: >
    {% set players = namespace(list=[]) %} {% for entity_id in states.media_player | map(attribute='entity_id') %}
      {% if 'media_player.' in entity_id %}
        {% set players.list = players.list + [entity_id] %}
      {% endif %}
    {% endfor %} {{ players.list }}

  # Determine the area the command originated from if available
  # This is available if a device triggered the conversation
  origin_area: >
    {% if device_id | default(none) %}
      {{ device_attr(device_id, 'area_id') }}
    {% else %}
      {{ none }}
    {% endif %}

  # Find players in the target area
  target_player: >
    {% if target_area | default(none) %}
      {% set area_players = namespace(list=[]) %}
      {% for entity_id in all_players %}
        {% set player_area = area_name(area_id(entity_id)) | lower %}
        {% if player_area == target_area | lower %}
          {% set area_players.list = area_players.list + [entity_id] %}
        {% endif %}
      {% endfor %}
      {% if area_players.list | count > 0 %}
        {{ area_players.list[0] }}
      {% else %}
        {{ none }}
      {% endif %}
    {% elif origin_area | default(none) %}
      {% set area_players = namespace(list=[]) %}
      {% for entity_id in all_players %}
        {% if area_id(entity_id) == origin_area %}
          {% set area_players.list = area_players.list + [entity_id] %}
        {% endif %}
      {% endfor %}
      {% if area_players.list | count > 0 %}
        {{ area_players.list[0] }}
      {% else %}
        {{ default_player }}
      {% endif %}
    {% else %}
      {{ default_player }}
    {% endif %}

  # Get episodes list from the news sensor
  episodes_list: "{{ state_attr(news_sensor, 'episodes') | default([]) }}"
  response_area: >
    {% if target_area | default(none) %}
      {{ target_area }}
    {% elif origin_area | default(none) %}
      {{ area_name(origin_area) }}
    {% else %}
      the default media player
    {% endif %}

sequence:
- alias: Check if we have a valid player
  if:
  - condition: template
    value_template: "{{ target_player != none }}"
  then:
  - alias: Check if there are news episodes
    if:
    - condition: template
      value_template: "{{ episodes_list | count > 0 }}"
      alias: Check if there are news episodes
    then:
    - data:
        scene_id: "{{ snapshot_name }}"
        snapshot_entities:
        - "{{ target_player }}"
      action: scene.create
      alias: Save the player state
    - target:
        entity_id: "{{ target_player }}"
      action: media_player.media_stop
      alias: Stop the player
    - alias: Cycle through news episodes
      repeat:
        sequence:
        - variables:
            current_episode: "{{ episodes_list[repeat.index - 1] }}"
            feed_name: "{{ current_episode.feed_name | default(unknown_feed_text) }}"
            episode_title: >-
              {{ current_episode.episode_title | default('Unknown Title') }}
            url_episode: "{{ current_episode.episode_url }}"
            duration: "{{ current_episode.duration }}"
          alias: Set Variables
        - action: "{{ tts_service }}"
          target:
            entity_id: "{{ tts_service }}"
          data:
            media_player_entity_id: "{{ target_player }}"
            message: "{{feed_name}} {{ episode_title }}"
          alias: Announce episode title
        - action: media_player.play_media
          target:
            entity_id: "{{ target_player }}"
          data:
            media_content_id: "{{ url_episode }}"
            media_content_type: audio/mpeg
            enqueue: replace
          alias: Play the news
        - wait_for_trigger:
          - trigger: state
            entity_id:
            - "{{ target_player }}"
            from: null
            to:
            - paused
            - stopped
            - idle
            for:
              seconds: 1
          timeout: "{{ duration }}"
          alias: Wait for the player to finish
        count: "{{ episodes_list | count }}"
    - action: "{{ tts_service }}"
      target:
        entity_id: "{{ tts_service }}"
      data:
        media_player_entity_id: "{{ target_player }}"
        message: "{{ end_news_text }}"
      alias: Announce end of news
    - target:
        entity_id: scene.{{ snapshot_name }}
      action: scene.turn_on
      alias: Restore Player state
    - respond_to_conversation:
        message: "Playing the latest news in {{ response_area }}."
    else:
    - action: "{{ tts_service }}"
      data:
        entity_id: "{{ target_player }}"
        message: "{{ no_news_text }}"
      alias: No news to play
    - respond_to_conversation:
        message: "I couldn't find any news episodes to play."
  else:
  - respond_to_conversation:
      message: "I couldn't find an appropriate media player in the specified area. Please specify a valid area with a media player."
